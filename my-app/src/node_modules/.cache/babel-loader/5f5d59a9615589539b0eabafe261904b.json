{"ast":null,"code":"/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\n\nvar _invariant = require('fbjs/lib/invariant');\n\nif (process.env.NODE_ENV !== 'production') {\n  var warning = require('fbjs/lib/warning');\n}\n\nvar MIXINS_KEY = 'mixins'; // Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\n\nfunction identity(fn) {\n  return fn;\n}\n\nvar ReactPropTypeLocationNames;\n\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\n\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n  var injectedMixins = [];\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n\n  var ReactClassInterface = {\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @nosideeffects\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n  };\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n\n  var RESERVED_SPEC_KEYS = {\n    displayName: function (Constructor, displayName) {\n      Constructor.displayName = displayName;\n    },\n    mixins: function (Constructor, mixins) {\n      if (mixins) {\n        for (var i = 0; i < mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function (Constructor, childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\n      }\n\n      Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);\n    },\n    contextTypes: function (Constructor, contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, contextTypes, 'context');\n      }\n\n      Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);\n    },\n\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function (Constructor, getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\n      } else {\n        Constructor.getDefaultProps = getDefaultProps;\n      }\n    },\n    propTypes: function (Constructor, propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, propTypes, 'prop');\n      }\n\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n    },\n    statics: function (Constructor, statics) {\n      mixStaticSpecIntoComponent(Constructor, statics);\n    },\n    autobind: function () {}\n  };\n\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;\n      }\n    }\n  }\n\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null; // Disallow overriding of base class methods unless explicitly allowed.\n\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);\n    } // Disallow defining methods more than once unless explicitly allowed.\n\n\n    if (isAlreadyDefined) {\n      _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);\n    }\n  }\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n\n\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n        process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;\n      }\n\n      return;\n    }\n\n    _invariant(typeof spec !== 'function', 'ReactClass: You\\'re attempting to ' + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');\n\n    _invariant(!isValidElement(spec), 'ReactClass: You\\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.');\n\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs; // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name]; // These cases should already be caught by validateMethodOverride.\n\n            _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name); // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n\n\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n\n    for (var name in statics) {\n      var property = statics[name];\n\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var isReserved = (name in RESERVED_SPEC_KEYS);\n\n      _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);\n\n      var isInherited = (name in Constructor);\n\n      _invariant(!isInherited, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);\n\n      Constructor[name] = property;\n    }\n  }\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n\n\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');\n\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);\n\n        one[key] = two[key];\n      }\n    }\n\n    return one;\n  }\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n\n\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n\n\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n\n\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n\n      boundMethod.bind = function (newThis) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        } // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n\n\n        if (newThis !== component && newThis !== null) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;\n        } else if (!args.length) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;\n          return boundMethod;\n        }\n\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n\n    return boundMethod;\n  }\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n\n\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n\n  var IsMountedMixin = {\n    componentDidMount: function () {\n      this.__isMounted = true;\n    },\n    componentWillUnmount: function () {\n      this.__isMounted = false;\n    }\n  };\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n\n  var ReactClassMixin = {\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function (newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function () {\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component') : void 0;\n        this.__didWarnIsMounted = true;\n      }\n\n      return !!this.__isMounted;\n    }\n  };\n\n  var ReactClassComponent = function () {};\n\n  _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n\n\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function (props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;\n      } // Wire up auto-binding\n\n\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n      this.state = null; // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (initialState === undefined && this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n\n      _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');\n\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n    mixSpecIntoComponent(Constructor, IsMountedMixin);\n    mixSpecIntoComponent(Constructor, spec); // Initialize the defaultProps property after all mixins have been merged.\n\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;\n    } // Reduce time spent doing lookups by setting these on the prototype.\n\n\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  }\n\n  return createClass;\n}\n\nmodule.exports = factory;","map":{"version":3,"sources":["/Users/subinkim/Development/flatiron/phase5/phase5_frontend/my-app/node_modules/create-react-class/factory.js"],"names":["_assign","require","emptyObject","_invariant","process","env","NODE_ENV","warning","MIXINS_KEY","identity","fn","ReactPropTypeLocationNames","prop","context","childContext","factory","ReactComponent","isValidElement","ReactNoopUpdateQueue","injectedMixins","ReactClassInterface","mixins","statics","propTypes","contextTypes","childContextTypes","getDefaultProps","getInitialState","getChildContext","render","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","updateComponent","RESERVED_SPEC_KEYS","displayName","Constructor","i","length","mixSpecIntoComponent","validateTypeDef","createMergedResultFunction","mixStaticSpecIntoComponent","autobind","typeDef","location","propName","hasOwnProperty","validateMethodOverride","isAlreadyDefined","name","specPolicy","ReactClassMixin","spec","typeofSpec","isMixinValid","proto","prototype","autoBindPairs","__reactAutoBindPairs","property","isReactClassMethod","isFunction","shouldAutoBind","push","createChainedFunction","isReserved","isInherited","mergeIntoWithNoDuplicateKeys","one","two","key","undefined","mergedResult","a","apply","arguments","b","c","chainedFunction","bindAutoBindMethod","component","method","boundMethod","bind","__reactBoundContext","__reactBoundMethod","__reactBoundArguments","componentName","constructor","_bind","newThis","_len","args","Array","_key","reboundMethod","bindAutoBindMethods","pairs","autoBindKey","IsMountedMixin","__isMounted","replaceState","newState","callback","updater","enqueueReplaceState","isMounted","__didWarnIsMounted","ReactClassComponent","createClass","props","refs","state","initialState","_isMockFunction","isArray","forEach","defaultProps","isReactClassApproved","componentShouldUpdate","componentWillRecieveProps","methodName","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,sBAAD,CAAzB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,oBAAD,CAAxB;;AAEA,IAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAIC,OAAO,GAAGN,OAAO,CAAC,kBAAD,CAArB;AACD;;AAED,IAAIO,UAAU,GAAG,QAAjB,C,CAEA;AACA;;AACA,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AACpB,SAAOA,EAAP;AACD;;AAED,IAAIC,0BAAJ;;AACA,IAAIP,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCK,EAAAA,0BAA0B,GAAG;AAC3BC,IAAAA,IAAI,EAAE,MADqB;AAE3BC,IAAAA,OAAO,EAAE,SAFkB;AAG3BC,IAAAA,YAAY,EAAE;AAHa,GAA7B;AAKD,CAND,MAMO;AACLH,EAAAA,0BAA0B,GAAG,EAA7B;AACD;;AAED,SAASI,OAAT,CAAiBC,cAAjB,EAAiCC,cAAjC,EAAiDC,oBAAjD,EAAuE;AACrE;AACF;AACA;AAGE,MAAIC,cAAc,GAAG,EAArB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,MAAIC,mBAAmB,GAAG;AAExB;AACJ;AACA;AACA;AACA;AACA;AACIC,IAAAA,MAAM,EAAE,aARgB;;AAUxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAE,aAjBe;;AAmBxB;AACJ;AACA;AACA;AACA;AACA;AACIC,IAAAA,SAAS,EAAE,aAzBa;;AA2BxB;AACJ;AACA;AACA;AACA;AACA;AACIC,IAAAA,YAAY,EAAE,aAjCU;;AAmCxB;AACJ;AACA;AACA;AACA;AACA;AACIC,IAAAA,iBAAiB,EAAE,aAzCK;AA2CxB;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,eAAe,EAAE,oBAvDO;;AAyDxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,eAAe,EAAE,oBAvEO;;AAyExB;AACJ;AACA;AACA;AACIC,IAAAA,eAAe,EAAE,oBA7EO;;AA+ExB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,MAAM,EAAE,aA/FgB;AAiGxB;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,kBAAkB,EAAE,aA1GI;;AA4GxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,iBAAiB,EAAE,aAtHK;;AAwHxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,yBAAyB,EAAE,aA3IH;;AA6IxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,qBAAqB,EAAE,aAjKC;;AAmKxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,mBAAmB,EAAE,aAlLG;;AAoLxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,kBAAkB,EAAE,aAhMI;;AAkMxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,oBAAoB,EAAE,aA7ME;AA+MxB;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,eAAe,EAAE;AA3NO,GAA1B;AA+NA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,MAAIC,kBAAkB,GAAG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","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar _invariant = require('fbjs/lib/invariant');\n\nif (process.env.NODE_ENV !== 'production') {\n  var warning = require('fbjs/lib/warning');\n}\n\nvar MIXINS_KEY = 'mixins';\n\n// Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\nfunction identity(fn) {\n  return fn;\n}\n\nvar ReactPropTypeLocationNames;\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context',\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\n\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n\n\n  var injectedMixins = [];\n\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n  var ReactClassInterface = {\n\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @nosideeffects\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n\n  };\n\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n  var RESERVED_SPEC_KEYS = {\n    displayName: function (Constructor, displayName) {\n      Constructor.displayName = displayName;\n    },\n    mixins: function (Constructor, mixins) {\n      if (mixins) {\n        for (var i = 0; i < mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function (Constructor, childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\n      }\n      Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);\n    },\n    contextTypes: function (Constructor, contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, contextTypes, 'context');\n      }\n      Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);\n    },\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function (Constructor, getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\n      } else {\n        Constructor.getDefaultProps = getDefaultProps;\n      }\n    },\n    propTypes: function (Constructor, propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, propTypes, 'prop');\n      }\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n    },\n    statics: function (Constructor, statics) {\n      mixStaticSpecIntoComponent(Constructor, statics);\n    },\n    autobind: function () {} };\n\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;\n      }\n    }\n  }\n\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;\n\n    // Disallow overriding of base class methods unless explicitly allowed.\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);\n    }\n\n    // Disallow defining methods more than once unless explicitly allowed.\n    if (isAlreadyDefined) {\n      _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);\n    }\n  }\n\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n        process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;\n      }\n\n      return;\n    }\n\n    _invariant(typeof spec !== 'function', 'ReactClass: You\\'re attempting to ' + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');\n    _invariant(!isValidElement(spec), 'ReactClass: You\\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.');\n\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs;\n\n    // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name];\n\n            // These cases should already be caught by validateMethodOverride.\n            _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);\n\n            // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n    for (var name in statics) {\n      var property = statics[name];\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var isReserved = name in RESERVED_SPEC_KEYS;\n      _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);\n\n      var isInherited = name in Constructor;\n      _invariant(!isInherited, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);\n      Constructor[name] = property;\n    }\n  }\n\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');\n\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);\n        one[key] = two[key];\n      }\n    }\n    return one;\n  }\n\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function (newThis) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;\n        } else if (!args.length) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n\n  var IsMountedMixin = {\n    componentDidMount: function () {\n      this.__isMounted = true;\n    },\n    componentWillUnmount: function () {\n      this.__isMounted = false;\n    }\n  };\n\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n  var ReactClassMixin = {\n\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function (newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function () {\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component') : void 0;\n        this.__didWarnIsMounted = true;\n      }\n      return !!this.__isMounted;\n    }\n  };\n\n  var ReactClassComponent = function () {};\n  _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function (props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (initialState === undefined && this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');\n\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, IsMountedMixin);\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;\n      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  }\n\n  return createClass;\n}\n\nmodule.exports = factory;\n"]},"metadata":{},"sourceType":"script"}