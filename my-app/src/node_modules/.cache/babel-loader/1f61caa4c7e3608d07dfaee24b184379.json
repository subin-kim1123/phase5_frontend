{"ast":null,"code":"var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isTypedArray = require('./isTypedArray');\n/** Used to compose bitmasks for comparison styles. */\n\n\nvar PARTIAL_COMPARE_FLAG = 2;\n/** `Object#toString` result references. */\n\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\n\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack());\n    return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n  }\n\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n      stack || (stack = new Stack());\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n    }\n  }\n\n  if (!isSameTag) {\n    return false;\n  }\n\n  stack || (stack = new Stack());\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n}\n\nmodule.exports = baseIsEqualDeep;","map":{"version":3,"sources":["/Users/subinkim/Development/flatiron/phase5/phase5_frontend/my-app/node_modules/react-google-maps/node_modules/lodash/_baseIsEqualDeep.js"],"names":["Stack","require","equalArrays","equalByTag","equalObjects","getTag","isArray","isTypedArray","PARTIAL_COMPARE_FLAG","argsTag","arrayTag","objectTag","objectProto","Object","prototype","hasOwnProperty","baseIsEqualDeep","object","other","equalFunc","customizer","bitmask","stack","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","call","othIsWrapped","objUnwrapped","value","othUnwrapped","module","exports"],"mappings":"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","sourcesContent":["var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for comparison styles. */\nvar PARTIAL_COMPARE_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n  }\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n"]},"metadata":{},"sourceType":"script"}