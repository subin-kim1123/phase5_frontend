{"ast":null,"code":"var isArrayLikeObject = require('./isArrayLikeObject');\n/** `Object#toString` result references. */\n\n\nvar argsTag = '[object Arguments]';\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar objectToString = objectProto.toString;\n/** Built-in value references. */\n\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\n\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\nmodule.exports = isArguments;","map":{"version":3,"sources":["/Users/subinkim/Development/flatiron/phase5/phase5_frontend/my-app/node_modules/react-google-maps/node_modules/lodash/isArguments.js"],"names":["isArrayLikeObject","require","argsTag","objectProto","Object","prototype","hasOwnProperty","objectToString","toString","propertyIsEnumerable","isArguments","value","call","module","exports"],"mappings":"AAAA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,qBAAD,CAA/B;AAEA;;;AACA,IAAIC,OAAO,GAAG,oBAAd;AAEA;;AACA,IAAIC,WAAW,GAAGC,MAAM,CAACC,SAAzB;AAEA;;AACA,IAAIC,cAAc,GAAGH,WAAW,CAACG,cAAjC;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc,GAAGJ,WAAW,CAACK,QAAjC;AAEA;;AACA,IAAIC,oBAAoB,GAAGN,WAAW,CAACM,oBAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B;AACA,SAAOX,iBAAiB,CAACW,KAAD,CAAjB,IAA4BL,cAAc,CAACM,IAAf,CAAoBD,KAApB,EAA2B,QAA3B,CAA5B,KACJ,CAACF,oBAAoB,CAACG,IAArB,CAA0BD,KAA1B,EAAiC,QAAjC,CAAD,IAA+CJ,cAAc,CAACK,IAAf,CAAoBD,KAApB,KAA8BT,OADzE,CAAP;AAED;;AAEDW,MAAM,CAACC,OAAP,GAAiBJ,WAAjB","sourcesContent":["var isArrayLikeObject = require('./isArrayLikeObject');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\nmodule.exports = isArguments;\n"]},"metadata":{},"sourceType":"script"}