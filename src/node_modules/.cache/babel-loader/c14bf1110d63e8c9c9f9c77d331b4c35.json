{"ast":null,"code":"var composeArgs = require('./_composeArgs'),\n    composeArgsRight = require('./_composeArgsRight'),\n    replaceHolders = require('./_replaceHolders');\n/** Used as the internal argument placeholder. */\n\n\nvar PLACEHOLDER = '__lodash_placeholder__';\n/** Used to compose bitmasks for function metadata. */\n\nvar BIND_FLAG = 1,\n    BIND_KEY_FLAG = 2,\n    CURRY_BOUND_FLAG = 4,\n    CURRY_FLAG = 8,\n    ARY_FLAG = 128,\n    REARG_FLAG = 256;\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeMin = Math.min;\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers used to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and\n * `_.rearg` modify function arguments, making the order in which they are\n * executed important, preventing the merging of metadata. However, we make\n * an exception for a safe combined case where curried functions have `_.ary`\n * and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\n\nfunction mergeData(data, source) {\n  var bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);\n  var isCombo = srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG || srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8] || srcBitmask == (ARY_FLAG | REARG_FLAG) && source[7].length <= source[8] && bitmask == CURRY_FLAG; // Exit early if metadata can't be merged.\n\n  if (!(isCommon || isCombo)) {\n    return data;\n  } // Use source `thisArg` if available.\n\n\n  if (srcBitmask & BIND_FLAG) {\n    data[2] = source[2]; // Set when currying a bound function.\n\n    newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;\n  } // Compose partial arguments.\n\n\n  var value = source[3];\n\n  if (value) {\n    var partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n  } // Compose partial right arguments.\n\n\n  value = source[5];\n\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n  } // Use source `argPos` if available.\n\n\n  value = source[7];\n\n  if (value) {\n    data[7] = value;\n  } // Use source `ary` if it's smaller.\n\n\n  if (srcBitmask & ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  } // Use source `arity` if one is not provided.\n\n\n  if (data[9] == null) {\n    data[9] = source[9];\n  } // Use source `func` and merge bitmasks.\n\n\n  data[0] = source[0];\n  data[1] = newBitmask;\n  return data;\n}\n\nmodule.exports = mergeData;","map":{"version":3,"sources":["/Users/subinkim/Development/flatiron/phase5/phase5_frontend/my-app/node_modules/react-google-maps/node_modules/lodash/_mergeData.js"],"names":["composeArgs","require","composeArgsRight","replaceHolders","PLACEHOLDER","BIND_FLAG","BIND_KEY_FLAG","CURRY_BOUND_FLAG","CURRY_FLAG","ARY_FLAG","REARG_FLAG","nativeMin","Math","min","mergeData","data","source","bitmask","srcBitmask","newBitmask","isCommon","isCombo","length","value","partials","module","exports"],"mappings":"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","sourcesContent":["var composeArgs = require('./_composeArgs'),\n    composeArgsRight = require('./_composeArgsRight'),\n    replaceHolders = require('./_replaceHolders');\n\n/** Used as the internal argument placeholder. */\nvar PLACEHOLDER = '__lodash_placeholder__';\n\n/** Used to compose bitmasks for function metadata. */\nvar BIND_FLAG = 1,\n    BIND_KEY_FLAG = 2,\n    CURRY_BOUND_FLAG = 4,\n    CURRY_FLAG = 8,\n    ARY_FLAG = 128,\n    REARG_FLAG = 256;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers used to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and\n * `_.rearg` modify function arguments, making the order in which they are\n * executed important, preventing the merging of metadata. However, we make\n * an exception for a safe combined case where curried functions have `_.ary`\n * and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\nfunction mergeData(data, source) {\n  var bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);\n\n  var isCombo =\n    ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||\n    ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||\n    ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));\n\n  // Exit early if metadata can't be merged.\n  if (!(isCommon || isCombo)) {\n    return data;\n  }\n  // Use source `thisArg` if available.\n  if (srcBitmask & BIND_FLAG) {\n    data[2] = source[2];\n    // Set when currying a bound function.\n    newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;\n  }\n  // Compose partial arguments.\n  var value = source[3];\n  if (value) {\n    var partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n  }\n  // Compose partial right arguments.\n  value = source[5];\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n  }\n  // Use source `argPos` if available.\n  value = source[7];\n  if (value) {\n    data[7] = value;\n  }\n  // Use source `ary` if it's smaller.\n  if (srcBitmask & ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  }\n  // Use source `arity` if one is not provided.\n  if (data[9] == null) {\n    data[9] = source[9];\n  }\n  // Use source `func` and merge bitmasks.\n  data[0] = source[0];\n  data[1] = newBitmask;\n\n  return data;\n}\n\nmodule.exports = mergeData;\n"]},"metadata":{},"sourceType":"script"}